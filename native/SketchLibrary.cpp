/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <iostream>
#include <Windows.h>
#include <ctime>
#include <cmath>
#include <cstdlib>
#include "SketchLibrary.h"
/* Header for class org_crayne_sketch_util_lib_NativeSketchLibrary */

#pragma comment(lib, "Advapi32.lib")
#pragma comment(lib, "Gdi32.lib")
#pragma comment(lib, "User32.lib")

#undef main

HDC dc = GetDC(GetConsoleWindow());
/*
 * Class:     org_crayne_sketch_util_lib_NativeSketchLibrary
 * Method:    terminalWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_crayne_sketch_util_lib_NativeSketchLibrary_terminalWidth(JNIEnv * env, jclass o) {
CONSOLE_SCREEN_BUFFER_INFO info;
HANDLE hout = GetStdHandle( STD_OUTPUT_HANDLE );
GetConsoleScreenBufferInfo(hout, &info);
SMALL_RECT window = info.srWindow;
return window.Right - window.Left;
}

/*
 * Class:     org_crayne_sketch_util_lib_NativeSketchLibrary
 * Method:    terminalHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_crayne_sketch_util_lib_NativeSketchLibrary_terminalHeight(JNIEnv * env, jclass o) {
CONSOLE_SCREEN_BUFFER_INFO info;
HANDLE hout = GetStdHandle( STD_OUTPUT_HANDLE );
GetConsoleScreenBufferInfo(hout, &info);
SMALL_RECT window = info.srWindow;
return window.Bottom - window.Top;
}

int unicode(const int uni_page, const int uni_symbol_relative) {
    int uni_page_reverse = (uni_page - 192) * 64;
    int uni_symbol_reverse = (uni_symbol_relative - 128) % 64;
    return uni_page_reverse + uni_symbol_reverse;
}

int unicode_page_cache = -1;
bool added_uni_already = false;

/*
 * Class:     org_crayne_sketch_util_lib_NativeSketchLibrary
 * Method:    keyPress
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_crayne_sketch_util_lib_NativeSketchLibrary_keyPress(JNIEnv * env, jclass o) {
    DWORD cc;
    INPUT_RECORD irec;
    HANDLE h = GetStdHandle(STD_INPUT_HANDLE);

    if (h == NULL) {
        return NULL; // console not found
    }
    while (irec.EventType != KEY_EVENT) {
        ReadConsoleInput( h, &irec, 1, &cc );
    }

    jintArray result = env->NewIntArray(3);
    if (result == NULL) {
        return NULL; // out of memory error thrown
    }
    bool uni = (int) ((KEY_EVENT_RECORD &) irec.Event).uChar.UnicodeChar >= 256;
    bool add_uni = uni && unicode_page_cache == -1;
    // convert the utf16 character into a utf8 numeral
    int relchar = (191 - (65535 - (int) ((KEY_EVENT_RECORD &) irec.Event).uChar.UnicodeChar) % 64);
    if (unicode_page_cache == -1) unicode_page_cache = 61 - (65535 - (int) ((KEY_EVENT_RECORD &) irec.Event).uChar.UnicodeChar);
    if (unicode_page_cache <= -65000) unicode_page_cache = 0;

    bool add = uni && !add_uni && added_uni_already;

    int keyDown = ((KEY_EVENT_RECORD &) irec.Event).bKeyDown == TRUE ? 1 : 0;
    int keyChar = add ? unicode(194 + unicode_page_cache, relchar) : (int) ((KEY_EVENT_RECORD &) irec.Event).uChar.UnicodeChar;
    if (keyDown == 0) unicode_page_cache = -1;
    if (add_uni) added_uni_already = true;
    else added_uni_already = false;

    int keyCode = (add ? 60000 : 0) + ((KEY_EVENT_RECORD &) irec.Event).wVirtualKeyCode;

    jint fill[] = {keyCode, keyChar, keyDown};
    env->SetIntArrayRegion(result, 0, 3, fill);
    return result;
}



/*
 * Class:     org_crayne_sketch_util_lib_NativeSketchLibrary
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_crayne_sketch_util_lib_NativeSketchLibrary_init
  (JNIEnv * env, jclass o) {}

/*
 * Class:     org_crayne_sketch_util_lib_NativeSketchLibrary
 * Method:    shutdown
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_crayne_sketch_util_lib_NativeSketchLibrary_shutdown
  (JNIEnv * env, jclass o) {}